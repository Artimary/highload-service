name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  DOTNET_VERSION: "9.0.x"

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: parking_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      influxdb:
        image: influxdb:latest
        env:
          DOCKER_INFLUXDB_INIT_MODE: setup
          DOCKER_INFLUXDB_INIT_USERNAME: admin
          DOCKER_INFLUXDB_INIT_PASSWORD: password123
          DOCKER_INFLUXDB_INIT_ORG: test-org
          DOCKER_INFLUXDB_INIT_BUCKET: iot_bucket
          DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: test-token-123
        ports:
          - 8086:8086
        options: >-
          --health-cmd "curl -f http://localhost:8086/ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: |
          dotnet restore ParkingApi/src/ParkingApi.csproj
          dotnet restore ParkingApi/tests/ParkingApi.IntegrationTests/ParkingApi.IntegrationTests.csproj

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Build test project
        run: dotnet build ParkingApi/tests/ParkingApi.IntegrationTests/ParkingApi.IntegrationTests.csproj --no-restore --configuration Release

      - name: Setup test database
        run: |
          # Wait for PostgreSQL to be ready
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

          # Initialize test database schema
          PGPASSWORD=postgres psql -h localhost -U postgres -d parking_test -c "
          CREATE TABLE IF NOT EXISTS parking_lots (
              id SERIAL PRIMARY KEY,
              lat DOUBLE PRECISION NOT NULL,
              lon DOUBLE PRECISION NOT NULL,
              total_spots INTEGER NOT NULL
          );

          CREATE TABLE IF NOT EXISTS bookings (
              id SERIAL PRIMARY KEY,
              vehicle_id VARCHAR(50) NOT NULL,
              parking_id INTEGER NOT NULL REFERENCES parking_lots(id) ON DELETE CASCADE,
              spot_number INTEGER NOT NULL,
              active BOOLEAN DEFAULT TRUE,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              UNIQUE(parking_id, spot_number)
          );

          INSERT INTO parking_lots (id, lat, lon, total_spots) VALUES 
              (1, 59.9343, 30.3351, 10),
              (2, 59.9600, 30.3200, 5)
          ON CONFLICT (id) DO UPDATE SET 
              lat = EXCLUDED.lat,
              lon = EXCLUDED.lon,
              total_spots = EXCLUDED.total_spots;
          "

      - name: Run unit tests
        run: dotnet test ParkingApi/tests/ParkingApi.IntegrationTests --configuration Release --verbosity normal --filter "Category!=Integration"

      - name: Run integration tests
        env:
          ASPNETCORE_ENVIRONMENT: Integration
          DOTNET_ENVIRONMENT: Integration
        run: dotnet test ParkingApi/tests/ParkingApi.IntegrationTests --configuration Release --verbosity normal --filter "Category=Integration"

      - name: Generate test coverage report
        run: |
          dotnet test ParkingApi/tests/ParkingApi.IntegrationTests --configuration Release \
            --collect:"XPlat Code Coverage" \
            --results-directory TestResults

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: TestResults/

      - name: Code quality analysis
        run: |
          # Install dotnet-format if not present
          dotnet tool install -g dotnet-format 2>/dev/null || true

          # Check code formatting
          dotnet format --verify-no-changes --verbosity diagnostic

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Security vulnerability scan
        run: |
          # Install security scanning tools
          dotnet tool install --global security-scan 2>/dev/null || true

          # Scan for known vulnerabilities
          dotnet list package --vulnerable --include-transitive 2>/dev/null || echo "No vulnerabilities found"

      - name: Dependency analysis
        run: |
          # Analyze package dependencies
          dotnet list package --outdated 2>/dev/null || echo "All packages up to date"
