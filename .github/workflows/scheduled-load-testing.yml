name: Scheduled Load Testing

on:
  schedule:
    # Run load tests every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scenario:
        description: 'Test scenario to run'
        required: true
        default: 'all'
        type: choice
        options:
        - simple_test
        - few_users_high_frequency
        - many_users_low_frequency
        - peak_load
        - database_stress
        - all

env:
  DOTNET_VERSION: "9.0.x"

jobs:
  scheduled-load-testing:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start application services
        run: |
          docker-compose --profile testing up -d --build

      - name: Wait for services readiness
        run: |
          timeout 300 bash -c 'until curl -sf http://localhost:8000/health; do echo "Waiting for API..."; sleep 5; done'
          docker-compose --profile testing exec -T postgresql pg_isready -U postgres

      - name: Run load test scenarios
        run: |
          mkdir -p ./scheduled-test-results
          
          if [ "${{ github.event.inputs.scenario }}" = "all" ] || [ "${{ github.event.inputs.scenario }}" = "" ]; then
            scenarios=("simple_test" "few_users_high_frequency" "many_users_low_frequency" "peak_load" "database_stress")
          else
            scenarios=("${{ github.event.inputs.scenario }}")
          fi
          
          for scenario in "${scenarios[@]}"; do
            echo "Running scenario: $scenario"
            
            # Clear previous results
            docker-compose --profile testing exec -T tsung rm -rf /tsung/results/* || true
            
            # Run test
            docker-compose --profile testing exec -T tsung tsung -f /tsung/scenarios/${scenario}.xml start
            
            # Wait for completion
            timeout 900 bash -c 'while docker-compose --profile testing exec -T tsung pgrep -f tsung > /dev/null; do sleep 15; done' || echo "Test timeout"
            
            # Copy results
            docker cp $(docker-compose --profile testing ps -q tsung):/tsung/results/. ./scheduled-test-results/${scenario}_results/
            
            # Brief analysis
            if [ -f "./scheduled-test-results/${scenario}_results/tsung.log" ]; then
              total_requests=$(grep -c "request" ./scheduled-test-results/${scenario}_results/tsung.log || echo "0")
              errors=$(grep -c "error" ./scheduled-test-results/${scenario}_results/tsung.log || echo "0")
              success_rate=$(( total_requests > 0 ? (total_requests - errors) * 100 / total_requests : 0 ))
              echo "Scenario $scenario: $total_requests requests, $success_rate% success rate"
              echo "$scenario,$total_requests,$errors,$success_rate" >> ./scheduled-test-results/summary.csv
            else
              echo "Scenario $scenario: FAILED - no results"
              echo "$scenario,0,0,0" >> ./scheduled-test-results/summary.csv
            fi
            
            sleep 30  # Cool down between tests
          done

      - name: Generate test report
        run: |
          echo "# Scheduled Load Testing Report" > ./scheduled-test-results/report.md
          echo "" >> ./scheduled-test-results/report.md
          echo "**Date:** $(date -u)" >> ./scheduled-test-results/report.md
          echo "**Commit:** ${{ github.sha }}" >> ./scheduled-test-results/report.md
          echo "" >> ./scheduled-test-results/report.md
          echo "| Scenario | Requests | Errors | Success Rate |" >> ./scheduled-test-results/report.md
          echo "|----------|----------|--------|--------------|" >> ./scheduled-test-results/report.md
          
          if [ -f "./scheduled-test-results/summary.csv" ]; then
            while IFS=',' read -r scenario requests errors success_rate; do
              echo "| $scenario | $requests | $errors | $success_rate% |" >> ./scheduled-test-results/report.md
            done < ./scheduled-test-results/summary.csv
          fi

      - name: Archive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: scheduled-load-test-results-${{ github.run_number }}
          path: ./scheduled-test-results/
          retention-days: 30

      - name: Check for performance degradation
        run: |
          if [ -f "./scheduled-test-results/summary.csv" ]; then
            while IFS=',' read -r scenario requests errors success_rate; do
              if [ "$success_rate" -lt 70 ]; then
                echo "WARNING: Performance degradation detected in $scenario: $success_rate% success rate"
                # In a real environment, this could trigger alerts or create issues
              fi
            done < ./scheduled-test-results/summary.csv
          fi

      - name: Cleanup
        if: always()
        run: |
          docker-compose --profile testing down -v
          docker system prune -f
