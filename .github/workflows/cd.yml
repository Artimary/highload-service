name: Continuous Deployment

on:
  push:
    branches: [main]
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [main]

env:
  DOTNET_VERSION: "9.0.x"
  REGISTRY: ghcr.io
  IMAGE_NAME: parking-api

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Only run if CI workflow completed successfully
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ParkingApi/src/ParkingApi.csproj

      - name: Build application
        run: dotnet build ParkingApi/src/ParkingApi.csproj --no-restore --configuration Release

      - name: Publish application
        run: dotnet publish ParkingApi/src/ParkingApi.csproj --configuration Release --output ./publish

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./ParkingApi/src
          file: ./ParkingApi/src/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here
          # For example, update docker-compose services:

          # docker-compose -f docker-compose.staging.yml down
          # docker-compose -f docker-compose.staging.yml pull
          # docker-compose -f docker-compose.staging.yml up -d

      - name: Run post-deployment load tests
        run: |
          echo "Running post-deployment load tests..."
          docker compose --profile testing up -d --build
          timeout 300 bash -c 'until curl -sf http://localhost:8000/health; do sleep 5; done'
          docker compose --profile testing exec -T tsung tsung -f /tsung/scenarios/few_users_high_frequency.xml start
          timeout 600 bash -c 'while docker compose --profile testing exec -T tsung pgrep -f tsung > /dev/null; do sleep 10; done'

      - name: Validate deployment performance
        run: |
          mkdir -p ./deployment-test-results
          docker cp $(docker compose --profile testing ps -q tsung):/tsung/results/. ./deployment-test-results/
          if [ -f "./deployment-test-results/tsung.log" ]; then
            total_requests=$(grep -c "request" ./deployment-test-results/tsung.log || echo "0")
            errors=$(grep -c "error" ./deployment-test-results/tsung.log || echo "0")
            success_rate=$(( (total_requests - errors) * 100 / total_requests ))
            echo "Deployment validation: $total_requests requests, $success_rate% success rate"
            if [ "$success_rate" -lt 80 ]; then
              echo "Deployment validation failed: success rate $success_rate% < 80%"
              exit 1
            fi
          fi
          docker compose --profile testing down -v

      - name: Run health checks
        run: |
          echo "Running health checks..."
          # Add health check logic here
          # curl -f http://staging.your-domain.com/health || exit 1

      - name: Deploy to production
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Deploying to production..."
          # Add production deployment logic here
          # This could involve:
          # - Updating Kubernetes deployments
          # - Updating Docker Swarm services
          # - Deploying to cloud providers (Azure, AWS, GCP)

          # Example for Docker Swarm:
          # docker service update --image ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest parking-api-service

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Deployment successful!"
          # Add notification logic here (Slack, Discord, email, etc.)

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          # Add failure notification logic here
