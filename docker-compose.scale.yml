version: "3"

services:
  # API Instance 1
  api:
    build:
      context: ./ParkingApi/src
      dockerfile: Dockerfile
    image: highload-github-api
    container_name: api-1
    command: dotnet ParkingApi.dll
    ports:
      - "8000:8000"
    depends_on:
      - postgresql
      - influxdb
      - redis
    environment:
      # - USE_MOCK_DATA=true
      - POSTGRES_CONNECTION_STRING=Host=pgbouncer;Port=6432;Database=parking_spots;Username=postgres;Password=secret;Maximum Pool Size=20;
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=super-secret-token
      - INFLUXDB_ORG=iot_org
      - INFLUXDB_BUCKET=iot_bucket
      - POSTGRES_HOST=postgresql
      - POSTGRES_PORT=5432
      - POSTGRES_DB=parking
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=secret
      - ASPNETCORE_URLS=http://+:8000
      - INSTANCE_ID=api-1
      - ConnectionStrings__Redis=redis:6379,password=${REDIS_PASSWORD:-complex-password},abortConnect=false
    networks:
      - iot-network
    deploy:
      resources:
        limits:
          cpus: "${API_CPU_LIMIT:-1}"
          memory: "${API_MEMORY_LIMIT:-1G}"
        reservations:
          cpus: "${API_CPU_RESERVATION:-0.5}"
          memory: "${API_MEMORY_RESERVATION:-512M}"

  # API Instance 2
  api-2:
    build:
      context: ./ParkingApi/src
      dockerfile: Dockerfile
    image: highload-github-api
    restart: unless-stopped
    container_name: api-2
    command: dotnet ParkingApi.dll
    ports:
      - "8002:8000"
    depends_on:
      - postgresql
      - influxdb
      - redis
    environment:
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=super-secret-token
      - INFLUXDB_ORG=iot_org
      - INFLUXDB_BUCKET=iot_bucket
      - POSTGRES_CONNECTION_STRING=Host=pgbouncer;Port=6432;Database=parking_spots;Username=postgres;Password=secret;Maximum Pool Size=20;
      - POSTGRES_HOST=postgresql
      - POSTGRES_PORT=5432
      - POSTGRES_DB=parking
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=secret
      - ASPNETCORE_URLS=http://+:8000
      - INSTANCE_ID=api-2
      - ConnectionStrings__Redis=redis:6379,password=${REDIS_PASSWORD:-complex-password},abortConnect=false
    networks:
      - iot-network
    deploy:
      resources:
        limits:
          cpus: "${API_CPU_LIMIT:-1}"
          memory: "${API_MEMORY_LIMIT:-1G}"
        reservations:
          cpus: "${API_CPU_RESERVATION:-0.5}"
          memory: "${API_MEMORY_RESERVATION:-512M}"

  # API Instance 3
  api-3:
    build:
      context: ./ParkingApi/src
      dockerfile: Dockerfile
    image: highload-github-api
    restart: unless-stopped
    container_name: api-3
    command: dotnet ParkingApi.dll
    ports:
      - "8003:8000"
    depends_on:
      - postgresql
      - influxdb
      - redis
    environment:
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=super-secret-token
      - INFLUXDB_ORG=iot_org
      - INFLUXDB_BUCKET=iot_bucket
      - POSTGRES_CONNECTION_STRING=Host=pgbouncer;Port=6432;Database=parking_spots;Username=postgres;Password=secret;Maximum Pool Size=20;
      - POSTGRES_HOST=postgresql
      - POSTGRES_PORT=5432
      - POSTGRES_DB=parking
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=secret
      - ASPNETCORE_URLS=http://+:8000
      - INSTANCE_ID=api-3
      - ConnectionStrings__Redis=redis:6379,password=${REDIS_PASSWORD:-complex-password},abortConnect=false
    networks:
      - iot-network
    deploy:
      resources:
        limits:
          cpus: "${API_CPU_LIMIT:-1}"
          memory: "${API_MEMORY_LIMIT:-1G}"
        reservations:
          cpus: "${API_CPU_RESERVATION:-0.5}"
          memory: "${API_MEMORY_RESERVATION:-512M}"

  # Nginx Load Balancer
  nginx:
    image: nginx:latest
    container_name: nginx-lb
    ports:
      - "80:80"
    volumes:
      - ./nginx/${NGINX_CONFIG:-round-robin.conf}:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
      - api-2
      - api-3
    networks:
      - iot-network

  # InfluxDB
  influxdb:
    container_name: influxdb
    image: influxdb
    ports:
      - "8086:8086"
    volumes:
      - ./influxdb/data:/var/lib/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=admin123
      - DOCKER_INFLUXDB_INIT_ORG=iot_org
      - DOCKER_INFLUXDB_INIT_BUCKET=iot_bucket
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=super-secret-token
    networks:
      - iot-network

  # PostgreSQL Database
  postgresql:
    image: postgres:latest
    container_name: postgresql
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: parking
      MAX_CONNECTIONS: ${PG_MAX_CONNECTIONS:-200}
      SHARED_BUFFERS: ${PG_SHARED_BUFFERS:-256MB}
    volumes:
      - ./postgresql/data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - iot-network
    deploy:
      resources:
        limits:
          cpus: "${DB_CPU_LIMIT:-2}"
          memory: "${DB_MEMORY_LIMIT:-2G}"
        reservations:
          cpus: "${DB_CPU_RESERVATION:-1}"
          memory: "${DB_MEMORY_RESERVATION:-1G}"

  # Tsung Load Testing Tool
  tsung:
    build:
      context: ./tsung
      dockerfile: Dockerfile
    container_name: tsung
    volumes:
      - ./tsung/scenarios:/tsung/scenarios
      - ./tsung/scripts:/tsung/scripts
      - ./tsung/config:/tsung/config
      - ./tsung/results:/tsung/results
    depends_on:
      - nginx
      - postgresql
      - influxdb
    networks:
      - iot-network
    profiles:
      - testing
    environment:
      - API_HOST=nginx
      - API_PORT=80
    command: tail -f /dev/null

  redis:
    image: redis:7-alpine
    container_name: redis-cache
    command: redis-server --requirepass ${REDIS_PASSWORD:-complex-password} --maxmemory ${REDIS_MAXMEMORY:-512mb} --maxmemory-policy ${REDIS_MAXMEMORY_POLICY:-allkeys-lru}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - iot-network
    healthcheck:
      test:
        [
          "CMD",
          "redis-cli",
          "-a",
          "${REDIS_PASSWORD:-complex-password}",
          "ping",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "${REDIS_CPU_LIMIT:-1}"
          memory: "${REDIS_MEMORY_LIMIT:-1G}"
        reservations:
          cpus: "${REDIS_CPU_RESERVATION:-0.5}"
          memory: "${REDIS_MEMORY_RESERVATION:-512M}"

  pg-replica-1:
    image: postgres:latest
    container_name: postgres-replica-1
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: parking
      # Настройки для репликации
      POSTGRES_MASTER_SERVICE_HOST: postgresql
      POSTGRES_MASTER_SERVICE_PORT: 5432
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: replpass
    volumes:
      - ./postgresql/replica1-data:/var/lib/postgresql/data
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./postgres/replica.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5433:5432"
    networks:
      - iot-network
    # entrypoint: ["/bin/bash"]
    command: |
      /bin/bash -c "
      chown -R postgres:postgres /var/lib/postgresql/data
      chmod 700 /var/lib/postgresql/data

      # Проверяем не только наличие standby.signal, но и PG_VERSION
      if [ -f /var/lib/postgresql/data/standby.signal ] && [ -f /var/lib/postgresql/data/PG_VERSION ]; then
        echo 'Репликация уже настроена и директория данных корректна. Запускаем PostgreSQL в режиме реплики.'
        gosu postgres postgres
      else
        echo 'Инициализация репликации заново...'
        
        # Удаляем предыдущие данные перед инициализацией
        rm -rf /var/lib/postgresql/data/*
        
        # Ждем пока мастер будет готов
        until pg_isready -h postgresql -p 5432; do
          echo 'Ожидаем готовности мастера...'
          sleep 2
        done
        
        # Создаем пользователя для репликации на мастере
        PGPASSWORD=secret psql -h postgresql -p 5432 -U postgres -c \"DO \\\$\\\$ BEGIN CREATE USER replicator REPLICATION PASSWORD 'replpass'; EXCEPTION WHEN duplicate_object THEN RAISE NOTICE 'User already exists'; END \\\$\\\$;\"
        
        # Создаем слот репликации
        PGPASSWORD=secret psql -h postgresql -p 5432 -U postgres -c \"SELECT pg_create_physical_replication_slot('replica_slot_1', true) WHERE NOT EXISTS (SELECT 1 FROM pg_replication_slots WHERE slot_name = 'replica_slot_1');\"
        
        # Создаем базовую резервную копию с мастера
        PGPASSWORD=replpass pg_basebackup -h postgresql -p 5432 -U replicator -D /var/lib/postgresql/data -X stream -P -v
        
        # Создаем файл standby.signal
        touch /var/lib/postgresql/data/standby.signal
        
        # Настраиваем подключение к мастеру
        echo \"primary_conninfo = 'host=postgresql port=5432 user=replicator password=replpass'\" >> /var/lib/postgresql/data/postgresql.conf
        echo \"primary_slot_name = 'replica_slot_1'\" >> /var/lib/postgresql/data/postgresql.conf
        
        chown -R postgres:postgres /var/lib/postgresql/data
        chmod 700 /var/lib/postgresql/data

        # Запускаем PostgreSQL
        exec gosu postgres postgres
      fi
      "
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  pg-replica-2:
    image: postgres:latest
    container_name: postgres-replica-2
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: parking
      # Настройки для репликации
      POSTGRES_MASTER_SERVICE_HOST: postgresql
      POSTGRES_MASTER_SERVICE_PORT: 5432
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: replpass
    volumes:
      - ./postgresql/replica2-data:/var/lib/postgresql/data
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./postgres/replica.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5434:5432"
    networks:
      - iot-network
    # entrypoint: ["/bin/bash"]
    command: |
      /bin/bash -c "
      chown -R postgres:postgres /var/lib/postgresql/data
      chmod 700 /var/lib/postgresql/data

      # Проверяем не только наличие standby.signal, но и PG_VERSION
      if [ -f /var/lib/postgresql/data/standby.signal ] && [ -f /var/lib/postgresql/data/PG_VERSION ]; then
        echo 'Репликация уже настроена и директория данных корректна. Запускаем PostgreSQL в режиме реплики.'
        gosu postgres postgres
      else
        echo 'Инициализация репликации заново...'
        
        # Удаляем предыдущие данные перед инициализацией
        rm -rf /var/lib/postgresql/data/*
        
        # Ждем пока мастер будет готов
        until pg_isready -h postgresql -p 5432; do
          echo 'Ожидаем готовности мастера...'
          sleep 2
        done
        
        # Создаем пользователя для репликации на мастере
        PGPASSWORD=secret psql -h postgresql -p 5432 -U postgres -c \"DO \\\$\\\$ BEGIN CREATE USER replicator REPLICATION PASSWORD 'replpass'; EXCEPTION WHEN duplicate_object THEN RAISE NOTICE 'User already exists'; END \\\$\\\$;\"
        
        # Создаем слот репликации
        PGPASSWORD=secret psql -h postgresql -p 5432 -U postgres -c \"SELECT pg_create_physical_replication_slot('replica_slot_2', true) WHERE NOT EXISTS (SELECT 1 FROM pg_replication_slots WHERE slot_name = 'replica_slot_2');\"
        
        # Создаем базовую резервную копию с мастера
        PGPASSWORD=replpass pg_basebackup -h postgresql -p 5432 -U replicator -D /var/lib/postgresql/data -X stream -P -v
        
        # Создаем файл standby.signal
        touch /var/lib/postgresql/data/standby.signal
        
        # Настраиваем подключение к мастеру
        echo \"primary_conninfo = 'host=postgresql port=5432 user=replicator password=replpass'\" >> /var/lib/postgresql/data/postgresql.conf
        echo \"primary_slot_name = 'replica_slot_2'\" >> /var/lib/postgresql/data/postgresql.conf
        
        chown -R postgres:postgres /var/lib/postgresql/data
        chmod 700 /var/lib/postgresql/data

        # Запускаем PostgreSQL
        exec gosu postgres postgres
      fi
      "
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  pg-shard-1:
    image: postgres:latest
    container_name: postgres-shard-1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: parking_spots
      MAX_CONNECTIONS: ${PG_SHARD_MAX_CONNECTIONS:-200}
      POSTGRES_INITDB_ARGS: "--data-checksums"
    volumes:
      - ./postgresql/shard1-data:/var/lib/postgresql/data
      - ./postgres/init-shard1.sql:/docker-entrypoint-initdb.d/init-shard1.sql
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5435:5432"
    networks:
      - iot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  pg-shard-2:
    image: postgres:latest
    container_name: postgres-shard-2
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: parking_bookings
      MAX_CONNECTIONS: ${PG_SHARD_MAX_CONNECTIONS:-200}
      POSTGRES_INITDB_ARGS: "--data-checksums"
    volumes:
      - ./postgresql/shard2-data:/var/lib/postgresql/data
      - ./postgres/init-shard2.sql:/docker-entrypoint-initdb.d/init-shard2.sql
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5436:5432"
    networks:
      - iot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgbouncer:
    image: edoburu/pgbouncer:latest
    container_name: pgbouncer
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=secret
      - DB_HOST=postgresql
      - DB_PORT=5432
      - DB_NAME=parking
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=1000
      - DEFAULT_POOL_SIZE=20
    ports:
      - "6432:5432"
    depends_on:
      pg-replica-1:
        condition: service_healthy
      pg-replica-2:
        condition: service_healthy
      pg-shard-1:
        condition: service_healthy
      pg-shard-2:
        condition: service_healthy
    networks:
      - iot-network
    restart: always
    volumes:
      - ./pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro
    healthcheck:
      test: ["CMD", "bash", "-c", "printf '' | nc localhost 5432"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  iot-network:
    driver: bridge

volumes:
  redis-data:
