// filepath: c:\Users\ap-ip\OneDrive\Рабочий стол\ITMO\highload-2025\ParkingApi\tests\ParkingApi.IntegrationTests\ParkingControllerTests.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Json;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using ParkingApi.Models;
using ParkingApi.Services;
using Xunit;

namespace ParkingApi.IntegrationTests
{
    public class ParkingControllerTests : IClassFixture<CustomWebApplicationFactory>, IClassFixture<TestDataFixture>
    {
        private readonly HttpClient _client;
        private readonly TestDataFixture _testDataFixture;
        
        public ParkingControllerTests(CustomWebApplicationFactory factory, TestDataFixture testDataFixture)
        {
            _client = factory.CreateClient();
            _testDataFixture = testDataFixture;
            
            // Настраиваем тестовые данные один раз при создании класса тестов
            try
            {
                _testDataFixture.SetupPostgresAsync().GetAwaiter().GetResult();
                _testDataFixture.SetupInfluxDbAsync().GetAwaiter().GetResult();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка при настройке тестовых данных: {ex.Message}");
                // Не выбрасываем исключение, т.к. тесты могут пройти и с частичными данными
            }
        }
        
        [Fact]
        [Trait("Category", "Integration")]
        public async Task GetParkingStatus_ReturnsSuccessAndCorrectContentType()
        {
            // Act
            var response = await _client.GetAsync("/parking/status");

            // Assert
            response.EnsureSuccessStatusCode();
            Assert.Equal("application/json; charset=utf-8", response.Content.Headers.ContentType?.ToString());

            var parkingStatuses = await response.Content.ReadFromJsonAsync<List<ParkingStatus>>();
            Assert.NotNull(parkingStatuses);
            // В пустой базе может не быть данных, поэтому не проверяем Count > 0
        }
        
        [Fact]
        [Trait("Category", "Integration")]
        public async Task GetParkingStatus_WithRadius_FiltersParkingLots()
        {
            // Act
            var response = await _client.GetAsync("/parking/status?lat=59.9343&lon=30.3351&radius=100");

            // Assert
            response.EnsureSuccessStatusCode();
            var parkingStatuses = await response.Content.ReadFromJsonAsync<List<ParkingStatus>>();
            Assert.NotNull(parkingStatuses);
            
            // Если есть данные, проверяем, что фильтрация работает
            if (parkingStatuses.Count > 0)
            {
                // Проверяем что ближайшая парковка с id = 1
                var hasParking1 = parkingStatuses.Any(p => p.Id == 1);
                Assert.True(hasParking1, "Парковка с ID=1 должна быть в результатах");
            }
        }
        
        [Fact]
        [Trait("Category", "Integration")]
        public async Task BookSpot_ReturnsSuccess_WhenSpotIsAvailable()
        {
            // Arrange - используем уникальный номер места для каждого запуска теста
            Random random = new Random();
            int spotNumber = random.Next(100, 1000); // Используем большие номера, чтобы не конфликтовать с другими тестами
            
            var bookingRequest = new BookingRequest
            {
                VehicleId = $"TEST{Guid.NewGuid().ToString().Substring(0, 8)}",
                SpotNumber = spotNumber
            };

            var content = new StringContent(
                JsonSerializer.Serialize(bookingRequest),
                Encoding.UTF8,
                "application/json");

            Console.WriteLine($"Тестируем бронирование: ParkingId=1, SpotNumber={spotNumber}");
            
            // Act
            var response = await _client.PostAsync("/parking/1/book", content);

            // Assert
            response.EnsureSuccessStatusCode();
            Console.WriteLine($"Бронирование успешно выполнено: {await response.Content.ReadAsStringAsync()}");
        }

        [Fact]
        [Trait("Category", "Integration")]
        public async Task BookSpot_ReturnsError_WhenSpotIsNotAvailable()
        {
            // Arrange - сначала бронируем место
            int spotNumber = 42; // Фиксированный номер для проверки занятости
            
            var bookingRequest1 = new BookingRequest
            {
                VehicleId = "TEST_VEHICLE_1",
                SpotNumber = spotNumber
            };

            var content1 = new StringContent(
                JsonSerializer.Serialize(bookingRequest1),
                Encoding.UTF8,
                "application/json");

            // Первое бронирование
            await _client.PostAsync("/parking/1/book", content1);
            
            // Пробуем забронировать то же место снова
            var bookingRequest2 = new BookingRequest
            {
                VehicleId = "TEST_VEHICLE_2",
                SpotNumber = spotNumber
            };

            var content2 = new StringContent(
                JsonSerializer.Serialize(bookingRequest2),
                Encoding.UTF8,
                "application/json");

            // Act - должен вернуть ошибку
            var response = await _client.PostAsync("/parking/1/book", content2);

            // Assert
            Assert.False(response.IsSuccessStatusCode, "Ожидается ошибка при попытке бронирования уже занятого места");
        }
        
        [Fact]
        [Trait("Category", "Integration")]
        public async Task GetBookingDetails_ReturnsCorrectData()
        {
            // Arrange - сначала создаем бронирование
            int spotNumber = 55;
            string vehicleId = "TEST_VEHICLE_DETAILS";
            
            var bookingRequest = new BookingRequest
            {
                VehicleId = vehicleId,
                SpotNumber = spotNumber
            };

            var content = new StringContent(
                JsonSerializer.Serialize(bookingRequest),
                Encoding.UTF8,
                "application/json");

            var createResponse = await _client.PostAsync("/parking/1/book", content);
            createResponse.EnsureSuccessStatusCode();
            
            // Act
            var response = await _client.GetAsync($"/parking/1/bookings?vehicleId={vehicleId}");

            // Assert
            response.EnsureSuccessStatusCode();
            var bookings = await response.Content.ReadFromJsonAsync<List<dynamic>>();
            Assert.NotNull(bookings);
            
            if (bookings.Count == 0)
            {
                // Если по какой-то причине бронирования нет, тест не пройдет
                Assert.True(false, $"Бронирование для автомобиля {vehicleId} не найдено");
            }
        }
        
        [Fact]
        [Trait("Category", "Integration")]
        public async Task DeleteBooking_RemovesBooking()
        {
            // Arrange - сначала создаем бронирование
            int spotNumber = 66;
            string vehicleId = "TEST_VEHICLE_DELETE";
            
            var bookingRequest = new BookingRequest
            {
                VehicleId = vehicleId,
                SpotNumber = spotNumber
            };

            var content = new StringContent(
                JsonSerializer.Serialize(bookingRequest),
                Encoding.UTF8,
                "application/json");

            var createResponse = await _client.PostAsync("/parking/1/book", content);
            createResponse.EnsureSuccessStatusCode();
            
            // Act - Удаляем бронирование
            var response = await _client.DeleteAsync($"/parking/1/bookings/{vehicleId}");

            // Assert
            response.EnsureSuccessStatusCode();
            
            // Проверяем, что бронирование удалено
            var checkResponse = await _client.GetAsync($"/parking/1/bookings?vehicleId={vehicleId}");
            checkResponse.EnsureSuccessStatusCode();
            var bookings = await checkResponse.Content.ReadFromJsonAsync<List<dynamic>>();
            Assert.NotNull(bookings);
            Assert.Empty(bookings);
        }
        
        [Fact]
        [Trait("Category", "Integration")]
        public async Task UpdateBooking_ModifiesBooking()
        {
            // Arrange - сначала создаем бронирование
            int originalSpot = 77;
            int newSpot = 88;
            string vehicleId = "TEST_VEHICLE_UPDATE";
            
            var bookingRequest = new BookingRequest
            {
                VehicleId = vehicleId,
                SpotNumber = originalSpot
            };

            var content = new StringContent(
                JsonSerializer.Serialize(bookingRequest),
                Encoding.UTF8,
                "application/json");

            var createResponse = await _client.PostAsync("/parking/1/book", content);
            createResponse.EnsureSuccessStatusCode();
            
            // Создаем запрос на обновление
            var updateRequest = new BookingUpdateRequest
            {
                SpotNumber = newSpot
            };

            var updateContent = new StringContent(
                JsonSerializer.Serialize(updateRequest),
                Encoding.UTF8,
                "application/json");
            
            // Act - обновляем бронирование
            var response = await _client.PutAsync($"/parking/1/bookings/{vehicleId}", updateContent);

            // Assert
            response.EnsureSuccessStatusCode();
            
            // Проверяем, что бронирование обновлено
            var checkResponse = await _client.GetAsync($"/parking/1/bookings?vehicleId={vehicleId}");
            checkResponse.EnsureSuccessStatusCode();
            var bookings = await checkResponse.Content.ReadFromJsonAsync<List<dynamic>>();
            
            Assert.NotNull(bookings);
            Assert.NotEmpty(bookings);
            
            // Здесь мы ожидаем, что API вернет обновленное бронирование с новым номером места
            // Но так как мы получаем dynamic, нам нужно преобразовать его в словарь для проверки
            var booking = bookings[0];
            var spotProperty = booking.GetType().GetProperty("SpotNumber");
            
            if (spotProperty != null)
            {
                int actualSpot = Convert.ToInt32(spotProperty.GetValue(booking));
                Assert.Equal(newSpot, actualSpot);
            }
            else
            {
                // Если нет свойства SpotNumber, значит формат ответа отличается от ожидаемого
                var json = JsonSerializer.Serialize(booking);
                Assert.True(false, $"Ответ API не содержит ожидаемого формата данных: {json}");
            }
        }
    }
}
